apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/version: 0.5.0
    helm.sh/chart: home-assistant-0.5.0
  name: home-assistant
  namespace: home-assistant
stringData:
  secrets.yaml: |
    # Database url
    db_url: ${POSTGRES_URL}
  serviceAccount.json: '{{ .HOME_ASSISTANT_GCP_SERVICE_ACCOUNT_JSON }}'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/version: 0.5.0
    helm.sh/chart: home-assistant-0.5.0
  name: home-assistant
  namespace: home-assistant
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/name: home-assistant
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/version: 0.5.0
    helm.sh/chart: home-assistant-0.5.0
  name: home-assistant
  namespace: home-assistant
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/version: 0.5.0
    helm.sh/chart: home-assistant-0.5.0
  name: home-assistant
  namespace: home-assistant
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: home-assistant
      app.kubernetes.io/name: home-assistant
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: home-assistant
        app.kubernetes.io/name: home-assistant
    spec:
      containers:
      - image: ghcr.io/jonaskop/home-assistant:0.5.0
        name: home-assistant
        ports:
        - containerPort: 8123
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 512Mi
        securityContext:
          runAsGroup: 1000
          runAsUser: 1000
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /config/secrets.yaml
          name: secrets
          subPath: secrets.yaml
        - mountPath: /config/serviceAccount.json
          name: secrets
          subPath: serviceAccount.json
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      initContainers:
      - command:
        - sh
        - -c
        - |
          for secretFile in /secret-files/*; do
            envsubst < "$secretFile" > /secrets/$(basename "$secretFile")
          done
        env:
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              key: uri
              name: home-assistant-postgres-app
        image: ghcr.io/jonaskop/home-assistant:0.5.0
        name: prepare-secrets
        resources:
          limits:
            memory: 64Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          runAsGroup: 1000
          runAsUser: 1000
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /secrets
          name: secrets
        - mountPath: /secret-files/secrets.yaml
          name: secret-files
          subPath: secrets.yaml
        - mountPath: /secret-files/serviceAccount.json
          name: secret-files
          subPath: serviceAccount.json
      securityContext:
        fsGroup: 1000
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: home-assistant
      - name: secret-files
        secret:
          secretName: home-assistant
      - emptyDir: {}
        name: secrets
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.org/websocket-services: home-assistant
  labels:
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/version: 0.5.0
    helm.sh/chart: home-assistant-0.5.0
  name: home-assistant
  namespace: home-assistant
spec:
  ingressClassName: nginx
  rules:
  - host: home-assistant.sjoedin.se
    http:
      paths:
      - backend:
          service:
            name: home-assistant
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - home-assistant.sjoedin.se
    secretName: home-assistant-tls
